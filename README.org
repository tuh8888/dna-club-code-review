#+title: Structure Mapping Engine (SME-clj)
#+sub-title: DnA Lab Code Review
#+author: Harrison Pielke-Lombardo
#+date: 06/18/2021
#+email: harrison.pielke-lombardo@cuanschutz.edu
#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [11pt, notitlepage]
#+LaTeX_HEADER: \usepackage[utf8]{inputenc}
#+LaTeX_HEADER: \usepackage[T1]{fontenc}
# % A note on fonts: As of 2019, NIH allows Arial, Georgia, Helvetica, and Palatino Linotype. Georgia and Arial are commercial fonts so you will need to use XeLaTeX and have them installed on your machine to use them. Palatino & Helvetica are available as free LaTeX packages so select the one you want and comment out the other.
#+LaTeX_HEADER: \usepackage{palatino}
# % A little extra line spread is better for the Palatino font
#+LaTeX_HEADER: \linespread{1.05}
#+LaTeX_HEADER: \renewcommand*\familydefault{\sfdefault}

#+LaTeX_HEADER: \usepackage{amsfonts, amsmath, amsthm, amssymb}
#+LaTeX_HEADER: \usepackage{graphicx}
#+LaTeX_HEADER: \usepackage{booktabs}
#+LaTeX_HEADER: \usepackage{wrapfig}
#+LaTeX_HEADER: \usepackage[labelfont=bf]{caption}
#+LaTeX_HEADER: \usepackage[top=0.5in,bottom=0.5in,left=0.5in,right=0.5in]{geometry}
#+LaTeX_HEADER: \pagestyle{empty}
#+LaTeX_HEADER: \hyphenation{ionto-pho-re-tic iso-tro-pic fortran}
#+OPTIONS: toc:nil num:nil reveal_progress:true reveal_history:true reveal_width:"100%" reveal_klipsify_src:t reveal_slide_number:nil reveal_center:true reveal_mousewheel:t reveal_controls:nil

#+REVEAL_EXTRA_CSS: https://use.fontawesome.com/releases/v5.15.3/css/all.css
#+REVEAL_EXTRA_CSS: custom.css
#+REVEAL_THEME: sky

#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_VERSION: 4

#+REVEAL_TITLE_SLIDE: <h2 class="title">%t</h2><p class="author">%a</p><p>University of Colorado Anschutz Medical Campus</p><p class="date">%d</p>
#+REVEAL_PLUGINS: (highlight)
#+REVEAL_ADD_PLUGIN: chalkboard RevealChalkboard https://cdn.jsdelivr.net/gh/rajgoel/reveal.js-plugins/chalkboard/plugin.js

#+REVEAL_CODEMIRROR_CONFIG: codemirror_options_in: {
#+REVEAL_CODEMIRROR_CONFIG:   lineNumbers: true,
#+REVEAL_CODEMIRROR_CONFIG:   autoCloseBrackets: true
#+REVEAL_CODEMIRROR_CONFIG: }

* Clone the Repo
  - Code base: [[https://www.github.com/tuh8888/SME-clj]]
  - This presentation: [[https://www.github.com/tuh8888/DnA-Code-Club-June-2021]]
#+begin_src bash
  npm install
  xdg-open ./README.html
#+end_src


* Analyzing biological mechanisms using analogy
  :PROPERTIES:
  :CUSTOM_ID: mechanism-def
  :END:
 #+begin_quote
  Mechanisms are entities and activities and their organization such that they are productive of regular changes from initial to terminal conditions.
 #+end_quote

 #+begin_quote
  Analogy is the comparison or alignment of two structured representations
 #+end_quote

** Analogy 101
   :PROPERTIES:
   :CUSTOM_ID: analogy
   :END:
   - Base and target
   - Corresponding elements
   - Inference

** Analogies in biology
  #+REVEAL_HTML: <div style="width:50%;float:left">
  file:images/DNA_unzipping.png


  DNA replication \rarr zipper
  #+REVEAL_HTML: </div>
  #+REVEAL_HTML: <div style="width:50%;float: left">
  file:images/lock-and-key-enzyme.jpg


  Enzyme activity \rarr lock-and-key
  #+REVEAL_HTML: </div>

** Computational tools for analogy
   :PROPERTIES:
   :CUSTOM_ID: comp-analogy
   :END:
   - Structure Mapping Engine (SME)  (Falkenhainer 1989)
   - Copycat (Hofstadter 1994)
   - Analogical Mapping by Constraint Satisfaction (ACME) (Holyoak 1989]
   - Learning and Inference with Schemas and Analogies (LISA) (Hummel 1997)

* Structure mapping engine
  :PROPERTIES:
  :CUSTOM_ID: sme
  :END:

** Inputs:
   :PROPERTIES:
   :CUSTOM_ID: input
   :END:
   - Base concept graph
   - Target concept graph
   - Rule set

** Outputs:
   :PROPERTIES:
   :CUSTOM_ID: output
   :END:
   - Global mapping containing:
      - A set of match hypotheses (correspondences)
      - Inferences, some of which are transferred from the base to the target

** Overview of the strategy
   :PROPERTIES:
   :CUSTOM_ID: overview
   :END:
   1. Generate potential match hypotheses
   2. Match locally consistent sets of match hypotheses (global mappings)
   3. Merge global mappings into clusters of match hypotheses
   4. Score global mappings
   5. Inference
   6. Transfer inferences

** Benefits
   :PROPERTIES:
   :CUSTOM_ID: benefits
   :END:
   - Relatively simple
   - Seems to handle certain cases well
   - Computationally tractable solution to difficult problem

** Limitations
   :PROPERTIES:
   :CUSTOM_ID: limitations
   :END:
   - Made for first-order logic
   - Hard-coded rules and types

* History of the code-base
  :PROPERTIES:
  :CUSTOM_ID: history
  :END:

** Common Lisp implementation
   :PROPERTIES:
   :CUSTOM_ID: lisp
   :END:
   # TODO 1980's

** Clojure re-write and simplification
   :PROPERTIES:
   :CUSTOM_ID: first-re-write
   :END:
   - SME-clj

** My fork: SME-clj reborn
   :PROPERTIES:
   :CUSTOM_ID: fork
   :END:
   - Mops representation
   - Further simplification

* Clojure 101
  :PROPERTIES:
  :CUSTOM_ID: clojure
  :END:
  - Functional
  - Dynamic
  - Lisp (function calls are first)
  - JVM or Browser hosted
  - REPL-driven development

** Examples
   :PROPERTIES:
   :CUSTOM_ID: clojure-example
   :END:
*** Examples
    :PROPERTIES:
    :CUSTOM_ID: example-1
    :END:
   #+REVEAL_HTML: <div style="font-size:1rem">
    #+BEGIN_SRC clojure
(+ 1 2 3)
    #+END_SRC

    #+BEGIN_SRC clojure
(let [x 2
      y 3
      x (+ x y)]
  (+ x y))
    #+END_SRC

    #+BEGIN_SRC clojure
(->> ["Happy" 1 '(str (js/parseInt "21") "st") 2 3 "birthday!"]
  (remove int?)
  (map eval)
  (interpose " ")
  (reduce str))
    #+END_SRC

    #+BEGIN_SRC clojure
(def greeting "Hello")

(defn hello [name]
  (println (str greeting name "!")))

(hello "DnA code club")
    #+END_SRC
   #+REVEAL_HTML: </div>

* SME-clj
  :PROPERTIES:
  :CUSTOM_ID: sme-clj
  :END:
** Project organization
   :PROPERTIES:
   :CUSTOM_ID: project-org
   :END:
   # TODO project directory structure
   - Source
     - Predefined rule sets
     - Type logic
     - Core pipeline
   - Tests
   - Notebooks
** Predefined rule sets
   :PROPERTIES:
   :CUSTOM_ID: rules
   :END:
   - Named rules
   - Functions
   - Literal similarity vs analogy rules
** Type logic
   :PROPERTIES:
   :CUSTOM_ID: types
   :END:
   - Building knowledge graphs
   - Handling different representations with multi-methods
** Core pipeline
   :PROPERTIES:
   :CUSTOM_ID: pipeline
   :END:
   1. Generate match hypotheses
   2. Create combinations of sets of match hypotheses
   3. Merge global mappings
   4. Finalize (score, etc.)
   5. Inference
   6. Transfer inferences

* [[http:localhost:3000][Example: Solar system model of the atom]]
  :PROPERTIES:
  :CUSTOM_ID: solar-atom
  :END:

* Old vs. New: What changed?
  :PROPERTIES:
  :CUSTOM_ID: old-v-new
  :END:

** Ease of use
*** Before
   - Extremely large output and intermediate steps
   - Dispersed, mutable knowledge
   - Hard to experiment with predefined types
*** After
    - Removed everything except match hypotheses in intermediate steps
    - Condensed, immutable knowledge graph
    - Keyword representation is much more flexible

** MOPs representation
*** Memory Organization Packets  (MOPs)
    - Composed of slots
      - Roles
      - Fillers
    - Meta-data

*** Before
    - Predicate logic
    - Good for simple testing
     #+begin_example
# TODO example of predicate logic representation
     #+end_example
*** After
    - Conversion functions from predicate logic to MOPs
    - Actual logic uses OWL-like knowledge graph

** Tests
   # TODO explain testing framework

* Challenges
  :PROPERTIES:
  :CUSTOM_ID: challenges
  :END:
** Large intermediate output (Solved)
   - Difficult to parse giant maps of repetitive information

** "Correct" answers are not always intuitive
   - While the algorithm is determinate, it's difficult to check if the result is correct.
   - Difficult to test
   - Multiple global mappings are output, some with intuitively "wrong" correspondences.

** Combinatorics (Work in progress)
   :PROPERTIES:
   :CUSTOM_ID: combinatorics
   :END:
   - All combinations of potentially corresponding entities gets huge quick.
   - What I call the "maximum constrained subset problem"
     - Given a set, $S$, and a constraint, $C$, find all maximum sized sets s.t. $S$ satisfies $C$
     - Number of possible subsets is $2^{|S|}$
     - Naive BFS doesn't help
   - O(2^n)

* The larger picture
  :PROPERTIES:
  :CUSTOM_ID: larger-picture
  :END:

** Where it fits into my own work
   - Uses my MOPs library
   - Used in Knowtator for visualizing analogies
   - Will be used in my analogical abstraction framework to identify correspondences

** Alternatives

* Calcium sparks and neuron spiking
  :PROPERTIES:
  :CUSTOM_ID: calcium-neuron
  :END:

* TODO
  :PROPERTIES:
  :CUSTOM_ID: future
  :END:
  - Handwritten library of analogies
  - Solve the "maximum constrained subset problem"
  - More interactive visualizations

* Maximum constrained subset problem

** BFS attempt
  [[file:images/20210618_105252.jpg]]

** Logic attempt
  [[file:images/Screenshot_20210616-105423_Zoom.jpg]]

* Contact info and acknowledgments
  :PROPERTIES:
  :CREATED:  [2020-10-24 Sat 04:27]
  :CUSTOM_ID: bibliography
  :END:
  - Email: harrison.pielke-lombardo@cuanschutz.edu
  - GitHub: tuh8888@github.com
  - Advisor: Larry Hunter
  - Colorado Biomedical Informatics Training Program grant T15 LM009451

  #+REVEAL_HTML: <div style="font-size:16px">
  bibliography:My_Library.bib
  bibliographystyle:plain
  #+REVEAL_HTML: </div>
